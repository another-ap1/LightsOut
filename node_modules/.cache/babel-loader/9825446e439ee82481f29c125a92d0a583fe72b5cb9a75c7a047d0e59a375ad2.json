{"ast":null,"code":"var _jsxFileName = \"/home/grant/documents/codingBootcamp/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows = 5,\n  ncols = 5,\n  chanceLightStartsOn = 0.25\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    //const randomBoolean = () => Math.random() >= .05;\n    return Array.from({\n      length: nrows\n    }).map(row => Array.from({\n      length: ncols\n    }).map(cell => Math.random() < chanceLightStartsOn));\n  }\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n      const copyBoard = oldBoard.map(row => [...row]);\n      flipCell(y, x, copyBoard);\n      flipCell(y, x - 1, copyBoard);\n      flipCell(y, x + 1, copyBoard);\n      flipCell(y - 1, x, copyBoard);\n      flipCell(y + 1, x, copyBoard);\n      return copyBoard;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"You Win!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 12\n    }, this);\n  }\n\n  // make table board\n\n  let tblBoard = [];\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push(/*#__PURE__*/_jsxDEV(Cell, {\n        isLit: board[y][x],\n        flipCellsAroundMe: evt => flipCellsAround(coord)\n      }, coord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this));\n    }\n    tblBoard.push(/*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, y, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 19\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: tblBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","Array","from","length","map","row","cell","Math","random","hasWon","every","flipCellsAround","coord","oldBoard","y","x","split","Number","flipCell","boardCopy","copyBoard","children","fileName","_jsxFileName","lineNumber","columnNumber","tblBoard","push","isLit","flipCellsAroundMe","evt","className","_c","$RefreshReg$"],"sources":["/home/grant/documents/codingBootcamp/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows=5, ncols=5, chanceLightStartsOn=0.25 }) {\n  const [board, setBoard] = useState(createBoard());\n\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    //const randomBoolean = () => Math.random() >= .05;\n    return Array.from({length:nrows}).map(\n      row => Array.from({length:ncols}).map(\n        cell => Math.random() < chanceLightStartsOn\n      )\n    );\n  }\n\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      const copyBoard = oldBoard.map(row => [...row]);\n\n      flipCell(y,x, copyBoard);\n      flipCell(y,x-1, copyBoard);\n      flipCell(y,x+1, copyBoard);\n      flipCell(y-1,x, copyBoard);\n      flipCell(y+1,x, copyBoard);\n\n      return copyBoard;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  if (hasWon()){\n    return <div>You Win!</div>\n  }\n\n  // make table board\n\n  let tblBoard = [];\n\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for(let x = 0; x < ncols; x++){\n      let coord = `${y}-${x}`;\n      row.push(\n        <Cell\n          key = {coord}\n          isLit = {board[y][x]}\n          flipCellsAroundMe={evt => flipCellsAround(coord)} \n        />,\n      );\n    }\n    tblBoard.push(<tr key={y}>{row}</tr>);\n  }\n  return (\n    <table className=\"Board\">\n      <tbody>{tblBoard}</tbody>\n    </table>\n  );\n}\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}